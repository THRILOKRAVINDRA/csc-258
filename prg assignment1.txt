#include <stdlib.h>
#include <time.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <exception>
#include <functional>
#include <array>
#define ARR_SIZE(arr) ( sizeof((arr)) / sizeof((arr[0])) )

using namespace std;

const int MAX_SIZE = 10000000;

// Set this to true if you wish the arrays to be printed.
const bool OUTPUT_DATA = true;


void ReadInput(string& sortAlg, int& size);

void GenerateSortedData(int data[], int size);
void GenerateNearlySortedData(int data[], int size);
void GenerateReverselySortedData(int data[], int size);
void GenerateRandomData(int data[], int size);
int partition(int data[],int lo, int hi);
void Combine(int data[], int l, int r, int m);

void Sort(int data[], int size, string sortAlg, char* dataType);

void InsertionSort(int data[], int size);
void MergeSort(int data[], int lo, int hi);
void QuickSort(int data[], int lo, int hi);
void STLSort(int data[], int size);

void Swap(int &x, int &y);
void swap(int A[],int random, int b);

bool IsSorted(int data[], int size);
void printData(int data[], int size, string title);


int main(void)
{
	int size,random;
	string sortAlg;
	ReadInput(sortAlg, size);
	srand(time(NULL));
	random=rand()%size;
	
	int * data = new int[size];
	if( data == NULL)
	{
		cout << "\n Memory allocation error." << endl;
		exit(1);
	}
	
	GenerateSortedData(data, size);
	Sort(data, size, sortAlg,"Sorted Data");

	GenerateNearlySortedData(data, size);
	Sort(data, size, sortAlg,"Nearly Sorted Data");
	
	GenerateReverselySortedData(data, size);
	Sort(data, size, sortAlg,"Reversely Sorted Data");
	
	GenerateRandomData(data, size);
	Sort(data, size, sortAlg,"Random Data");
		
	cout << "\nProgram Completed Successfully." << endl;;
	
	delete [] data;
	
	return 0;
}
/********************************************************************/




void ReadInput(string& sortAlg, int& size)
{
	cout << "  I:\tInsertion Sort" << endl;
	cout << "  M:\tMergeSort" << endl;
	cout << "  Q:\tQuickSort" << endl;
	cout << "  S:\tSTLSort" << endl;
	cout << "Enter sorting algorithm: ";
	cin >> sortAlg;
	string sortAlgName;
	
	
	if(sortAlg == "I")
		sortAlgName = "Insertion Sort";
	else if(sortAlg == "M")
		sortAlgName = "MergeSort";
	else if(sortAlg == "Q")
		sortAlgName = "QuickSort";
	else if(sortAlg == "S")
		sortAlgName = "STLSort";
	else {
		cout << "\nUnrecognized sorting algorithm Code: " << sortAlg << endl;
		exit(1);
	}
	
	cout << "Enter input size: ";
	cin >> size;
	
	cout << "\nSorting Algorithm: " << sortAlgName;
	cout << "\nInput Size = " << size << endl;
	cout << endl;
	
}
/******************************************************************************/




void GenerateSortedData(int data[], int size)
{
	int i;
	
	for(i=0; i<size; i++)
		data[i] = i * 3 + 5;
}
/*****************************************************************************/



void GenerateNearlySortedData(int data[], int size)
{
	int i;
	
	GenerateSortedData(data, size);
	
	for(i=0; i<size; i++)
		if(i % 10 == 0)
			if(i+1 < size)
				data[i] = data[i+1] + 7;
}
/*****************************************************************************/



void GenerateReverselySortedData(int data[], int size)
{
	int i;
	
	for(i = 0; i < size; i++)
		data[i] = (size-i) * 2 + 3;
}
/*****************************************************************************/



void GenerateRandomData(int data[], int size)
{
	int i;
	
	for(i = 0; i < size; i++)
		data[i] = rand();
}
/*****************************************************************************/


void Sort(int data[], int size, string sortAlg, char* dataType)
{
	
	cout << endl << dataType << ":";
	
	
	if (OUTPUT_DATA)
		printData(data, size, "Data before sorting:");
	
	
	
	// Sorting is about to begin ... start the timer!
	clock_t start = clock();
	
	
	if(sortAlg == "I")
		InsertionSort(data, size);
	else if(sortAlg == "M")
		MergeSort(data, 0, size-1);
	else if(sortAlg == "Q")
		QuickSort(data, 0, size-1);
	else if(sortAlg == "S")
		STLSort(data, size);
	else
	{
		cout << "Invalid sorting algorithm!" << endl;
		exit(1);
	}
	
	// Sorting has finished ... stop the timer!
	clock_t end = clock();
	double elapsed = (((double) (end - start)) / CLOCKS_PER_SEC) * 1000;
	
	
	
	if (OUTPUT_DATA)
		printData(data, size, "Data after sorting:");
	
	
	if (IsSorted(data, size))
    {
		cout << "\nCorrectly sorted " << size << " elements in " << elapsed << "ms";
    }
	else
		cout << "ERROR!: INCORRECT SORTING!" << endl;
	cout << "\n-------------------------------------------------------------\n";
}
/*****************************************************************************/




bool IsSorted(int data[], int size)
{
	int i;
	
	for(i=0; i<(size-1); i++)
	{
		if(data[i] > data[i+1])
			return false;
	}
	return true;
}
/*****************************************************************************/




void InsertionSort(int data[], int size)
{
	int w=size;
	int i,j,temp,k;
    for (i = 1; i < size; i++)
    	{
        for (j = i; j >= 1; j--)
        {
            if (data[j] < data[j-1])
            {
                temp = data[j];
                data[j] = data[j-1];
                data[j-1] = temp;
            }
            else
                break;
        }
    }
    cout<<"sorted array\n"<<endl;
	
}
/*****************************************************************************/




void MergeSort(int data[], int lo, int hi)
{
	int q;
if(lo<hi){

    
    	q=(lo+hi)/2;
    	MergeSort(data,lo,q);
    	MergeSort(data,q+1,hi);
    	Combine(data,lo,hi,q);

}
}

void Combine(int data[],int lo,int hi,int q)
{
	int i, j, k;
    int n1 = q - lo + 1;
    int n2 =  hi - q;
 
    int L[n1], R[n2];
 
    for (i = 0; i < n1; i++)
        L[i] = data[lo + i];
    for (j = 0; j < n2; j++)
        R[j] = data[q + 1+ j];
 
    
    i = 0; 
    j = 0; 
    k = lo; 
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            data[k] = L[i];
            i++;
        }
        else
        {
            data[k] = R[j];
            j++;
        }
        k++;
    }
                                              
      while (i < n1)
    {
        data[k] = L[i];
        i++;
        k++;
    }
 
        while (j < n2)
    {
        data[k] = R[j];
        j++;
        k++;
    }
}

/*****************************************************************************/

void QuickSort(int data[], int lo, int hi)
{
	          int q;
            	if(lo>=hi)
            	{
            		return;
            	}
					cout<<"in quicksort";
            		q=partition(data,lo,hi);
            		QuickSort(data,lo,q-1);
            		QuickSort(data,q+1,hi);
                    cout<<"q"<<q;
 }
 
			
	int partition(int A[],int a,int b)
{
	int z,i,j;				
	int random = rand()%(b-a + 1) + a;
	std::cout<<"random "<<random<<"  ";
	
	swap(A,random,b);
	
	j=a-1;
	for(i=a;i<b;i++)
	{
		if(A[i]<A[b]){
		
		swap(A,i,j+1);
		j++;
	}
	}
swap(A,b,j+1);
return j+1;
}	

	
/*****************************************************************************/



void STLSort(int data[], int size)
{
	std::sort(data, data + size);

}

/*****************************************************************************/




void Swap(int &x, int &y)
{
	int temp = x;
	x = y;
	y = temp;
}
/*****************************************************************************/

void swap(int A[],int random, int b)
{
    int temp;
    temp = A[random];
    A[random] = A[b];
    A[b] = temp;
}

/*****************************************************************************/


void printData(int data[], int size, string title) 
{
	int i;

	cout << endl << title << endl;
	for(i=0; i<size; i++)
	{
		cout << data[i] << " ";
		if(i%10 == 9 && size > 10)
			cout << endl;
	}
}